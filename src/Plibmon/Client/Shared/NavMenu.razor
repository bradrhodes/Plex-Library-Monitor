@inject HttpClient Http

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Plibmon</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <div class="nav-status">
            <img class="plex-icon" src="pngegg.png" alt="Plex icon"/>
            <a class="navbar-brand" href="">@isConnectableToPlex</a>
        </div>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="plexConnect">
                <span class="oi oi-plus" aria-hidden="true"></span> Connect to Plex
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    
    string isConnectableToPlex = "Checking Plex connection";

    private async Task IsConnectableToPlex()
    {
        var connectResult = await Http.GetStringAsync("/api/Plibmon").ConfigureAwait(false);
        // var connectResult = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");       
        bool.TryParse(connectResult, out var result);

        // isConnectableToPlex = result == true ? "Connected to Plex" : "Unable to connect to Plex";
        isConnectableToPlex = result switch {
            true => "Connected to Plex",
            false => "Unable to connect to Plex"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await IsConnectableToPlex();
        await base.OnInitializedAsync();
    }

}
