@inject AppState AppState;
@using System.Diagnostics
@implements IDisposable;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Plibmon</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
<div class="top-row ps-3 navbar navbar-dark">
    <PlexConnection></PlexConnection>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        
        @if (!AppState.CanConnectToPlex)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="plexConnect">
                    <span class="oi oi-plus" aria-hidden="true"></span> Connect to Plex
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
            await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        AppState.StateChanged += async (source, property)
            => await AppState_StateChanged(source, property);
    }

    public void Dispose()
    {
        // AppState.StateChanged += async (Source, Property) => await AppState_Statechanged(Source, Property);
        AppState.StateChanged -= async (source, property) => 
            await AppState_StateChanged(source, property);
    }

}
